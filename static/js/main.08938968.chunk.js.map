{"version":3,"sources":["serviceWorker.js","mazeAlgorithms/recursiveDivision.js","mazeAlgorithms/verticalMaze.js","mazeAlgorithms/horizontalMaze.js","pathfindingVisualizer/Node/node.jsx","pathfindingVisualizer/navbar.jsx","pathfindingAlgorithms/dijkstra.js","pathfindingAlgorithms/astar.js","pathfindingAlgorithms/breadthFirstSearch.js","pathfindingAlgorithms/depthFirstSearch.js","pathfindingAlgorithms/randomWalk.js","pathfindingAlgorithms/greedyBestFirstSearch.js","pathfindingAlgorithms/bidirectionalGreedySearch.js","pathfindingVisualizer/pathfindingVisualizer.jsx","pathfindingAlgorithms/floodFill.js","mazeAlgorithms/randomMaze.js","index.js"],"names":["Boolean","window","location","hostname","match","walls","Node","props","state","cellHeight","this","row","col","isStart","isFinish","isWall","isVisited","isShortest","onMouseEnter","onMouseDown","onMouseUp","width","height","numRows","numColumns","extraClass","cellWidth","Math","floor","id","className","style","Component","brand","innerWidth","NavBar","algorithm","maze","pathState","mazeState","speedState","selection","visualizingAlgorithm","setState","clearPath","generatingMaze","clearTemp","alg","visualizeDijkstra","visualizeAStar","visualizeGreedyBFS","visualizeBidirectionalGreedySearch","visualizeBFS","visualizeDFS","visualizeRandomWalk","visualizeFloodFill","clearGrid","generateRandomMaze","generateRecursiveDivisionMaze","generateVerticalMaze","generateHorizontalMaze","speed","value","updateSpeed","href","role","aria-label","type","data-toggle","onClick","selectAlgorithm","visualizeAlgorithm","selectMaze","generateMaze","changeSpeed","dijkstra","grid","startNode","finishNode","distance","unvisitedNodes","nodes","node","push","getNodes","visitedNodesInOrder","length","sort","a","b","closestNode","shift","Infinity","updateUnvisitedNeighbours","unvisitedNeighbours","neighbours","filter","neighbour","getUnvisitedNeighbours","unvisitedNeighbour","previousNode","getNeighbours","neighbourNotInUnvisitedNodes","manhattenDistance","abs","getRandomNeighbour","neighboursFilteredStartAndWall","neighboursFilteredVisited","random","numNodesVisited","count","isNeighbour","closestNodeStart","closestNodeFinish","rowStart","colStart","rowFinish","colFinish","nodeA","nodeB","recursiveDivisionMaze","vertical","range","horizontal","getRecursiveWalls","dir","num","generateOddRandomNumber","addWall","slice","indexOf","len","result","i","array","max","randomNum","isStartFinish","tempWalls","temp","splice","generateRandomNumber","wall","verticalMaze","choice","getVerticalWalls","horizontalMaze","getHorizontalWalls","initialNum","getInitialNum","innerHeight","initialNumRows","initialNumColumns","startFinishNode","randomNums","x","y","startNodeRow","startNodeCol","finishNodeRow","finishNodeCol","getRandomNums","getStartFinishNode","PathfindingVisualizer","mouseIsPressed","mazeSpeed","updateDimensions","path","animateShortestPath","nodesInShortestPathOrder","setTimeout","newGrid","updateNodesForRender","document","getElementById","animateAlgorithm","newNode","animateRandomWalk","animateMaze","getNewGridWithMaze","addEventListener","getInitialGrid","getNewGridWithWalls","getGridWithoutPath","visitedNodesInOrderStart","visitedNodesInOrderFinish","isShortedPath","getVisitedNodesInOrder","undefined","currentNode","unshift","getNodesInShortestPathOrderDijkstra","Error","numCols","foundTarget","dfs","parent","floodFill","current","getNodesInShortestPathOrderFloodFill","totalDistance","astar","getNodesInShortestPathOrderAstar","breadthFirstSearch","getNodesInShortestPathOrderBFS","depthFirstSearch","getNodesInShortestPathOrderDFS","maxNodes","maxNodesVisitedTracker","loopTracker","randomNeighbour","nodesVisited","randomWalk","greedyBFS","getNodesInShortestPathOrderGreedyBFS","unvisitedNodesStart","unvisitedNodesFinish","bidirectionalGreedySearch","getNodesInShortestPathOrderBidirectionalGreedySearch","animateBidirectionalAlgorithm","randomMaze","Fragment","bind","map","rowId","key","nodeId","handleMouseDown","handleMouseEnter","handleMouseUp","randomNums1","randomNums2","currentRow","createNode","n","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.08938968.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","let walls;\nexport function recursiveDivisionMaze(grid, startNode, finishNode) {\n  if (!startNode || !finishNode || startNode === finishNode) {\n    return false;\n  }\n  let vertical = range(grid[0].length);\n  let horizontal = range(grid.length);\n  walls = [];\n  getRecursiveWalls(vertical, horizontal, grid, startNode, finishNode);\n  return walls;\n}\n\nfunction range(len) {\n  let result = [];\n  for (let i = 0; i < len; i++) {\n    result.push(i);\n  }\n  return result;\n}\n\n//dir === 0 => Horizontal\n//dir === 1 => Vertical\n\nfunction getRecursiveWalls(vertical, horizontal, grid, startNode, finishNode) {\n  if (vertical.length < 2 || horizontal.length < 2) {\n    return;\n  }\n  let dir;\n  let num;\n  if (vertical.length > horizontal.length) {\n    dir = 0;\n    num = generateOddRandomNumber(vertical);\n  }\n  if (vertical.length <= horizontal.length) {\n    dir = 1;\n    num = generateOddRandomNumber(horizontal);\n  }\n\n  if (dir === 0) {\n    addWall(dir, num, vertical, horizontal, startNode, finishNode);\n    getRecursiveWalls(\n      vertical.slice(0, vertical.indexOf(num)),\n      horizontal,\n      grid,\n      startNode,\n      finishNode\n    );\n    getRecursiveWalls(\n      vertical.slice(vertical.indexOf(num) + 1),\n      horizontal,\n      grid,\n      startNode,\n      finishNode\n    );\n  } else {\n    addWall(dir, num, vertical, horizontal, startNode, finishNode);\n    getRecursiveWalls(\n      vertical,\n      horizontal.slice(0, horizontal.indexOf(num)),\n      grid,\n      startNode,\n      finishNode\n    );\n    getRecursiveWalls(\n      vertical,\n      horizontal.slice(horizontal.indexOf(num) + 1),\n      grid,\n      startNode,\n      finishNode\n    );\n  }\n}\n\nfunction generateOddRandomNumber(array) {\n  let max = array.length - 1;\n  let randomNum =\n    Math.floor(Math.random() * (max / 2)) +\n    Math.floor(Math.random() * (max / 2));\n  if (randomNum % 2 === 0) {\n    if (randomNum === max) {\n      randomNum -= 1;\n    } else {\n      randomNum += 1;\n    }\n  }\n  return array[randomNum];\n}\n\n//dir === 0 => Horizontal\n//dir === 1 => Vertical\n\nfunction addWall(dir, num, vertical, horizontal, startNode, finishNode) {\n  let isStartFinish = false;\n  let tempWalls = [];\n  if (dir === 0) {\n    if (horizontal.length === 2) return;\n    for (let temp of horizontal) {\n      if (\n        (temp === startNode.row && num === startNode.col) ||\n        (temp === finishNode.row && num === finishNode.col)\n      ) {\n        isStartFinish = true;\n        continue;\n      }\n      tempWalls.push([temp, num]);\n    }\n  } else {\n    if (vertical.length === 2) return;\n    for (let temp of vertical) {\n      if (\n        (num === startNode.row && temp === startNode.col) ||\n        (num === finishNode.row && temp === finishNode.col)\n      ) {\n        isStartFinish = true;\n        continue;\n      }\n      tempWalls.push([num, temp]);\n    }\n  }\n  if (!isStartFinish) {\n    tempWalls.splice(generateRandomNumber(tempWalls.length), 1);\n  }\n  for (let wall of tempWalls) {\n    walls.push(wall);\n  }\n}\n\nfunction generateRandomNumber(max) {\n  let randomNum =\n    Math.floor(Math.random() * (max / 2)) +\n    Math.floor(Math.random() * (max / 2));\n  if (randomNum % 2 !== 0) {\n    if (randomNum === max) {\n      randomNum -= 1;\n    } else {\n      randomNum += 1;\n    }\n  }\n  return randomNum;\n}\n","let walls;\nexport function verticalMaze(grid, startNode, finishNode) {\n  if (!startNode || !finishNode || startNode === finishNode) {\n    return false;\n  }\n  let vertical = range(grid[0].length);\n  let horizontal = range(grid.length);\n  walls = [];\n  getVerticalWalls(vertical, horizontal, startNode, finishNode);\n  return walls;\n}\n\nfunction range(len) {\n  let result = [];\n  for (let i = 0; i < len; i++) {\n    result.push(i);\n  }\n  return result;\n}\n\nfunction getVerticalWalls(vertical, horizontal, startNode, finishNode) {\n  if (vertical.length < 2) {\n    return;\n  }\n\n  let choice = Math.floor(Math.random() * 2);\n  for (let num of vertical) {\n    if (choice === 0 && num % 2 !== 0) {\n      addWall(num, horizontal, startNode, finishNode);\n    }\n    if (choice === 1 && num % 2 === 0) {\n      addWall(num, horizontal, startNode, finishNode);\n    }\n  }\n}\n\nfunction addWall(num, horizontal, startNode, finishNode) {\n  let isStartFinish = false;\n  let tempWalls = [];\n  for (let temp of horizontal) {\n    if (\n      (temp === startNode.row && num === startNode.col) ||\n      (temp === finishNode.row && num === finishNode.col)\n    ) {\n      isStartFinish = true;\n      continue;\n    }\n    tempWalls.push([temp, num]);\n  }\n  if (!isStartFinish) {\n    tempWalls.splice(Math.floor(Math.random() * tempWalls.length), 1);\n  }\n  for (let wall of tempWalls) {\n    walls.push(wall);\n  }\n}\n","let walls;\nexport function horizontalMaze(grid, startNode, finishNode) {\n  if (!startNode || !finishNode || startNode === finishNode) {\n    return false;\n  }\n  let vertical = range(grid[0].length);\n  let horizontal = range(grid.length);\n  walls = [];\n  getHorizontalWalls(vertical, horizontal, startNode, finishNode);\n  return walls;\n}\n\nfunction range(len) {\n  let result = [];\n  for (let i = 0; i < len; i++) {\n    result.push(i);\n  }\n  return result;\n}\n\nfunction getHorizontalWalls(vertical, horizontal, startNode, finishNode) {\n  if (horizontal.length < 2) {\n    return;\n  }\n\n  let choice = Math.floor(Math.random() * 2);\n  for (let num of horizontal) {\n    if (choice === 0 && num % 2 !== 0) {\n      addWall(num, vertical, startNode, finishNode);\n    }\n    if (choice === 1 && num % 2 === 0) {\n      addWall(num, vertical, startNode, finishNode);\n    }\n  }\n}\n\nfunction addWall(num, vertical, startNode, finishNode) {\n  let isStartFinish = false;\n  let tempWalls = [];\n  for (let temp of vertical) {\n    if (\n      (num === startNode.row && temp === startNode.col) ||\n      (num === finishNode.row && temp === finishNode.col)\n    ) {\n      isStartFinish = true;\n      continue;\n    }\n    tempWalls.push([num, temp]);\n  }\n  if (!isStartFinish) {\n    tempWalls.splice(Math.floor(Math.random() * tempWalls.length), 1);\n  }\n  for (let wall of tempWalls) {\n    walls.push(wall);\n  }\n}\n","import React, { Component } from \"react\";\nimport \"./node.css\";\n\nclass Node extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    const {\n      row,\n      col,\n      isStart,\n      isFinish,\n      isWall,\n      isVisited,\n      isShortest,\n      onMouseEnter,\n      onMouseDown,\n      onMouseUp,\n      width,\n      height,\n      numRows,\n      numColumns,\n    } = this.props;\n\n    const extraClass = isStart\n      ? \"node node-start\"\n      : isFinish\n      ? \"node node-finish\"\n      : isWall\n      ? \"node-wall\"\n      : isShortest\n      ? \"node node-shortest-path\"\n      : isVisited\n      ? \"node node-visited\"\n      : \"node\";\n\n    let cellWidth = Math.floor((width - 15) / numColumns);\n    let cellHeight;\n    if (width > 1500) {\n      cellHeight = Math.floor((height - 70) / numRows);\n    } else if (width > 1000) {\n      cellHeight = Math.floor((height - 70) / numRows);\n    } else if (width > 500) {\n      cellHeight = Math.floor((height - 60) / numRows);\n    } else if (width > 0) {\n      cellHeight = Math.floor((height - 50) / numRows);\n    }\n\n    return (\n      <div\n        id={`node-${row}-${col}`}\n        className={`${extraClass}`}\n        style={{ \"--width\": `${cellWidth}px`, \"--height\": `${cellHeight}px` }}\n        onMouseEnter={() => onMouseEnter(row, col)}\n        onMouseDown={() => onMouseDown(row, col)}\n        onMouseUp={() => onMouseUp()}\n      ></div>\n    );\n  }\n}\n\nexport default Node;\n","import React, { Component } from \"react\";\nimport \"./navbar.css\";\n\nconst brand = window.innerWidth > 600 ? \"Pathfinding Visualizer\" : \"Pathfinder\";\n\nclass NavBar extends Component {\n  state = {\n    algorithm: \"Visualize Algorithm\",\n    maze: \"Generate Maze\",\n    pathState: false,\n    mazeState: false,\n    speedState: \"Speed\",\n  };\n\n  selectAlgorithm(selection) {\n    if (this.props.visualizingAlgorithm) return;\n    if (\n      selection === this.state.algorithm ||\n      this.state.algorithm === \"Visualize Algorithm\" ||\n      this.state.algorithm === \"Select an Algorithm!\"\n    ) {\n      this.setState({ algorithm: selection });\n    } else if (this.state.pathState) {\n      this.clearPath();\n      this.setState({ algorithm: selection });\n    } else {\n      this.setState({ algorithm: selection });\n    }\n  }\n\n  visualizeAlgorithm() {\n    if (this.props.visualizingAlgorithm || this.props.generatingMaze) return;\n    if (this.state.pathState) {\n      this.clearTemp();\n      return;\n    }\n    if (\n      this.state.algorithm === \"Visualize Algorithm\" ||\n      this.state.algorithm === \"Select an Algorithm!\"\n    ) {\n      this.setState({ algorithm: \"Select an Algorithm!\" });\n    } else {\n      this.setState({ pathState: true });\n      const alg = this.state.algorithm;\n      if (alg === \"Visualize Dijkstra\") this.props.visualizeDijkstra();\n      else if (alg === \"Visualize A*\") this.props.visualizeAStar();\n      else if (alg === \"Visualize Greedy BFS\") this.props.visualizeGreedyBFS();\n      else if (alg === \"Visualize Bidirectional Greedy\")\n        this.props.visualizeBidirectionalGreedySearch();\n      else if (alg === \"Visualize Breadth First Search\")\n        this.props.visualizeBFS();\n      else if (alg === \"Visualize Depth First Search\")\n        this.props.visualizeDFS();\n      else if (alg === \"Visualize Random Walk\")\n        this.props.visualizeRandomWalk();\n      else if (alg === \"Visualize Flood Fill\")\n        this.props.visualizeFloodFill();\n    }\n  }\n\n  selectMaze(selection) {\n    if (this.props.visualizingAlgorithm || this.props.generatingMaze) return;\n    if (\n      selection === this.state.maze ||\n      this.state.maze === \"Generate Maze\" ||\n      this.state.maze === \"Select a Maze!\"\n    ) {\n      this.setState({ maze: selection });\n    } else if (!this.state.mazeState) {\n      this.setState({ maze: selection });\n    } else {\n      this.clearGrid();\n      this.setState({ maze: selection });\n    }\n  }\n\n  generateMaze() {\n    if (this.props.visualizingAlgorithm || this.props.generatingMaze) return;\n    if (this.state.mazeState || this.state.pathState) this.clearTemp();\n    if (\n      this.state.maze === \"Generate Maze\" ||\n      this.state.maze === \"Select a Maze!\"\n    ) {\n      this.setState({ maze: \"Select a Maze!\" });\n    } else {\n      this.setState({ mazeState: true });\n      const maze = this.state.maze;\n      if (maze === \"Generate Random Maze\") this.props.generateRandomMaze();\n      else if (maze === \"Generate Recursive Maze\")\n        this.props.generateRecursiveDivisionMaze();\n      else if (maze === \"Generate Vertical Maze\")\n        this.props.generateVerticalMaze();\n      else if (maze === \"Generate Horizontal Maze\")\n        this.props.generateHorizontalMaze();\n    }\n  }\n\n  clearGrid() {\n    if (this.props.visualizingAlgorithm || this.props.generatingMaze) return;\n    this.props.clearGrid();\n    this.setState({\n      algorithm: \"Visualize Algorithm\",\n      maze: \"Generate Maze\",\n      pathState: false,\n      mazeState: false,\n    });\n  }\n\n  clearPath() {\n    if (this.props.visualizingAlgorithm || this.props.generatingMaze) return;\n    this.props.clearPath();\n    this.setState({ pathState: false, mazeState: false });\n  }\n\n  clearTemp() {\n    if (this.props.visualizingAlgorithm || this.props.generatingMaze) return;\n    this.props.clearGrid();\n    this.setState({ pathState: false, mazeState: false });\n  }\n\n  changeSpeed(speed) {\n    if (this.props.visualizingAlgorithm || this.props.generatingMaze) return;\n    let value = [10, 10];\n    if (speed === \"Slow\") value = [50, 30];\n    else if (speed === \"Medium\") value = [25, 20];\n    else if (speed === \"Fast\") value = [10, 10];\n    this.setState({ speedState: speed });\n    this.props.updateSpeed(value[0], value[1]);\n  }\n\n  render() {\n    return (\n      <nav className=\"navbar navbar-expand navbar-dark bg-dark px-3\">\n        <a className=\"navbar-brand h1 mb-0\" href=\"/\">\n          <span role=\"img\" aria-label=\"Compass\">🧭</span> {brand}\n        </a>\n        <div className=\"navbar-collapse\" id=\"navbarNavDropdown\">\n          <ul className=\"navbar-nav align-items-center\">\n\n            {/* Algorithms */}\n            <li className=\"nav-item dropdown mx-2\">\n              <div className=\"dropdown\">\n                <button className=\"btn btn-outline-light btn-sm dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\">\n                  Algorithms\n                </button>\n                <div className=\"dropdown-menu p-2\">\n                  <strong className=\"dropdown-header\">Weighted</strong>\n                  <button className=\"dropdown-item\" onClick={() => this.selectAlgorithm(\"Visualize Dijkstra\")}>Dijkstra</button>\n                  <button className=\"dropdown-item\" onClick={() => this.selectAlgorithm(\"Visualize A*\")}>A*</button>\n                  <div className=\"dropdown-divider\"></div>\n                  <strong className=\"dropdown-header\">Unweighted</strong>\n                  <button className=\"dropdown-item\" onClick={() => this.selectAlgorithm(\"Visualize Greedy BFS\")}>Greedy BFS</button>\n                  <button className=\"dropdown-item\" onClick={() => this.selectAlgorithm(\"Visualize Bidirectional Greedy\")}>Bidirectional Greedy</button>\n                  <button className=\"dropdown-item\" onClick={() => this.selectAlgorithm(\"Visualize Breadth First Search\")}>BFS</button>\n                  <button className=\"dropdown-item\" onClick={() => this.selectAlgorithm(\"Visualize Depth First Search\")}>DFS</button>\n                  <button className=\"dropdown-item\" onClick={() => this.selectAlgorithm(\"Visualize Random Walk\")}>Random Walk</button>\n                  <button className=\"dropdown-item\" onClick={() => this.selectAlgorithm(\"Visualize Flood Fill\")}>Flood Fill (DFS)</button>\n                </div>\n              </div>\n            </li>\n\n            {/* Visualize */}\n            <li className=\"mx-2\">\n              <button className=\"btn btn-success btn-sm\" onClick={() => this.visualizeAlgorithm()}>\n                <span role=\"img\" aria-label=\"Play\">▶️</span> {this.state.algorithm}\n              </button>\n            </li>\n\n            {/* Mazes */}\n            <li className=\"nav-item dropdown mx-2\">\n              <div className=\"dropdown\">\n                <button className=\"btn btn-outline-light btn-sm dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\">\n                  Mazes\n                </button>\n                <div className=\"dropdown-menu p-2\">\n                  <button className=\"dropdown-item\" onClick={() => this.selectMaze(\"Generate Random Maze\")}>Random Maze</button>\n                  <button className=\"dropdown-item\" onClick={() => this.selectMaze(\"Generate Recursive Maze\")}>Recursive Division</button>\n                  <button className=\"dropdown-item\" onClick={() => this.selectMaze(\"Generate Vertical Maze\")}>Vertical Maze</button>\n                  <button className=\"dropdown-item\" onClick={() => this.selectMaze(\"Generate Horizontal Maze\")}>Horizontal Maze</button>\n                </div>\n              </div>\n            </li>\n\n            {/* Generate */}\n            <li className=\"mx-2\">\n              <button className=\"btn btn-primary btn-sm\" onClick={() => this.generateMaze()}>\n                <span role=\"img\" aria-label=\"Globe\">🌐</span> {this.state.maze}\n              </button>\n            </li>\n\n            {/* Clear */}\n            <li className=\"mx-2\">\n              <button className=\"btn btn-danger btn-sm\" onClick={() => this.clearGrid()}>\n                <span role=\"img\" aria-label=\"Broom\">🧹</span> Clear Grid\n              </button>\n            </li>\n\n            {/* Speed */}\n            <li className=\"nav-item dropdown mx-2\">\n              <div className=\"dropdown\">\n                <button className=\"btn btn-outline-info btn-sm dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\">\n                  <span role=\"img\" aria-label=\"Lightning\">⚡</span> {this.state.speedState}\n                </button>\n                <div className=\"dropdown-menu p-2\">\n                  <button className=\"dropdown-item\" onClick={() => this.changeSpeed(\"Slow\")}>\n                    <span role=\"img\" aria-label=\"Turtle\">🐢</span> Slow\n                  </button>\n                  <button className=\"dropdown-item\" onClick={() => this.changeSpeed(\"Medium\")}>\n                    <span role=\"img\" aria-label=\"Walk\">🚶</span> Medium\n                  </button>\n                  <button className=\"dropdown-item\" onClick={() => this.changeSpeed(\"Fast\")}>\n                    <span role=\"img\" aria-label=\"Rocket\">🚀</span> Fast\n                  </button>\n                </div>\n              </div>\n            </li>\n\n          </ul>\n        </div>\n      </nav>\n    );\n  }\n}\n\nexport default NavBar;\n","export function dijkstra(grid, startNode, finishNode) {\n  if (!startNode || !finishNode || startNode === finishNode) {\n    return false;\n  }\n  startNode.distance = 0;\n  let unvisitedNodes = getNodes(grid);\n  let visitedNodesInOrder = [];\n  while (unvisitedNodes.length !== 0) {\n    unvisitedNodes.sort((a, b) => a.distance - b.distance);\n    let closestNode = unvisitedNodes.shift();\n    if (closestNode.isWall) continue;\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\n    if (closestNode === finishNode) return visitedNodesInOrder;\n    closestNode.isVisited = true;\n    visitedNodesInOrder.push(closestNode);\n    updateUnvisitedNeighbours(closestNode, grid);\n  }\n}\n\nfunction getNodes(grid) {\n  let nodes = [];\n  for (let row of grid) {\n    for (let node of row) {\n      nodes.push(node);\n    }\n  }\n  return nodes;\n}\n\nfunction updateUnvisitedNeighbours(node, grid) {\n  let unvisitedNeighbours = getUnvisitedNeighbours(node, grid);\n  for (let unvisitedNeighbour of unvisitedNeighbours) {\n    unvisitedNeighbour.distance = node.distance + 1;\n    unvisitedNeighbour.previousNode = node;\n  }\n}\n\nfunction getUnvisitedNeighbours(node, grid) {\n  let neighbours = [];\n  let { row, col } = node;\n  if (row !== 0) neighbours.push(grid[row - 1][col]);\n  if (col !== grid[0].length - 1) neighbours.push(grid[row][col + 1]);\n  if (row !== grid.length - 1) neighbours.push(grid[row + 1][col]);\n  if (col !== 0) neighbours.push(grid[row][col - 1]);\n  return neighbours\n    .filter((neighbour) => !neighbour.isWall)\n    .filter((neighbour) => !neighbour.isVisited);\n}\n\nexport function getNodesInShortestPathOrderDijkstra(finishNode) {\n  let nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n  return nodesInShortestPathOrder;\n}\n","export function astar(grid, startNode, finishNode) {\n  if (!startNode || !finishNode || startNode === finishNode) {\n    return false;\n  }\n  let unvisitedNodes = []; //open list\n  let visitedNodesInOrder = []; //closed list\n  startNode.distance = 0;\n  unvisitedNodes.push(startNode);\n\n  while (unvisitedNodes.length !== 0) {\n    unvisitedNodes.sort((a, b) => a.totalDistance - b.totalDistance);\n    let closestNode = unvisitedNodes.shift();\n    if (closestNode === finishNode) return visitedNodesInOrder;\n\n    closestNode.isVisited = true;\n    visitedNodesInOrder.push(closestNode);\n\n    let neighbours = getNeighbours(closestNode, grid);\n    for (let neighbour of neighbours) {\n      let distance = closestNode.distance + 1;\n      //f(n) = g(n) + h(n)\n      if (neighbourNotInUnvisitedNodes(neighbour, unvisitedNodes)) {\n        unvisitedNodes.unshift(neighbour);\n        neighbour.distance = distance;\n        neighbour.totalDistance =\n          distance + manhattenDistance(neighbour, finishNode);\n        neighbour.previousNode = closestNode;\n      } else if (distance < neighbour.distance) {\n        neighbour.distance = distance;\n        neighbour.totalDistance =\n          distance + manhattenDistance(neighbour, finishNode);\n        neighbour.previousNode = closestNode;\n      }\n    }\n  }\n  return visitedNodesInOrder;\n}\n\nfunction getNeighbours(node, grid) {\n  let neighbours = [];\n  let { row, col } = node;\n  if (col !== grid[0].length - 1) neighbours.push(grid[row][col + 1]);\n  if (row !== grid.length - 1) neighbours.push(grid[row + 1][col]);\n  if (col !== 0) neighbours.push(grid[row][col - 1]);\n  if (row !== 0) neighbours.push(grid[row - 1][col]);\n  return neighbours.filter(\n    (neighbour) => !neighbour.isWall && !neighbour.isVisited\n  );\n}\n\nfunction neighbourNotInUnvisitedNodes(neighbour, unvisitedNodes) {\n  for (let node of unvisitedNodes) {\n    if (node.row === neighbour.row && node.col === neighbour.col) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction manhattenDistance(node, finishNode) {\n  let x = Math.abs(node.row - finishNode.row);\n  let y = Math.abs(node.col - finishNode.col);\n  return x + y;\n}\n\nexport function getNodesInShortestPathOrderAstar(finishNode) {\n  let nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n  return nodesInShortestPathOrder;\n}\n","export function breadthFirstSearch(grid, startNode, finishNode) {\n  if (!startNode || !finishNode || startNode === finishNode) {\n    return false;\n  }\n  let unvisitedNodes = [];\n  let visitedNodesInOrder = [];\n  unvisitedNodes.push(startNode);\n  while (unvisitedNodes.length !== 0) {\n    let closestNode = unvisitedNodes.shift();\n    if (closestNode.isWall) continue;\n    if (closestNode === finishNode) return visitedNodesInOrder;\n    visitedNodesInOrder.push(closestNode);\n    closestNode.isVisited = true;\n    let unvisitedNeighbours = getUnvisitedNeighbours(closestNode, grid);\n    for (let unvisitedNeighbour of unvisitedNeighbours) {\n      unvisitedNeighbour.previousNode = closestNode;\n      if (neighbourNotInUnvisitedNodes(unvisitedNeighbour, unvisitedNodes)) {\n        unvisitedNodes.push(unvisitedNeighbour);\n      }\n    }\n  }\n  return visitedNodesInOrder;\n}\n\nfunction getUnvisitedNeighbours(node, grid) {\n  let neighbours = [];\n  let { row, col } = node;\n  if (row !== 0) neighbours.push(grid[row - 1][col]);\n  if (col !== grid[0].length - 1) neighbours.push(grid[row][col + 1]);\n  if (row !== grid.length - 1) neighbours.push(grid[row + 1][col]);\n  if (col !== 0) neighbours.push(grid[row][col - 1]);\n  return neighbours.filter((neighbour) => !neighbour.isVisited);\n}\n\nfunction neighbourNotInUnvisitedNodes(neighbour, unvisitedNodes) {\n  for (let node of unvisitedNodes) {\n    if (node.row === neighbour.row && node.col === neighbour.col) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function getNodesInShortestPathOrderBFS(finishNode) {\n  let nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n  return nodesInShortestPathOrder;\n}\n","export function depthFirstSearch(grid, startNode, finishNode) {\n  if (!startNode || !finishNode || startNode === finishNode) {\n    return false;\n  }\n  let unvisitedNodes = [];\n  let visitedNodesInOrder = [];\n  unvisitedNodes.push(startNode);\n  while (unvisitedNodes.length !== 0) {\n    let closestNode = unvisitedNodes.shift();\n    if (closestNode.isWall) continue;\n    if (closestNode === finishNode) return visitedNodesInOrder;\n    visitedNodesInOrder.push(closestNode);\n    closestNode.isVisited = true;\n    let unvisitedNeighbours = getUnvisitedNeighbours(closestNode, grid);\n    for (let unvisitedNeighbour of unvisitedNeighbours) {\n      unvisitedNeighbour.previousNode = closestNode;\n      unvisitedNodes.unshift(unvisitedNeighbour);\n    }\n  }\n  return visitedNodesInOrder;\n}\n\nfunction getUnvisitedNeighbours(node, grid) {\n  let neighbours = [];\n  let { row, col } = node;\n  if (col !== 0) neighbours.push(grid[row][col - 1]);\n  if (row !== 0) neighbours.push(grid[row - 1][col]);\n  if (col !== grid[0].length - 1) neighbours.push(grid[row][col + 1]);\n  if (row !== grid.length - 1) neighbours.push(grid[row + 1][col]);\n  return neighbours.filter((neighbour) => !neighbour.isVisited);\n}\n\nexport function getNodesInShortestPathOrderDFS(finishNode) {\n  let nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n  return nodesInShortestPathOrder;\n}\n","export function randomWalk(grid, startNode, finishNode) {\n  if (!startNode || !finishNode || startNode === finishNode) {\n    return false;\n  }\n  let visitedNodesInOrder = [];\n  let closestNode = startNode;\n  let maxNodes = grid.length * grid[0].length;\n  let maxNodesVisitedTracker = 0;\n  let loopTracker = 0;\n  while (true) {\n    closestNode.isVisited = true;\n    visitedNodesInOrder.push(closestNode);\n    if (closestNode === finishNode) return visitedNodesInOrder;\n    let randomNeighbour = getRandomNeighbour(closestNode, grid, finishNode);\n    let nodesVisited = numNodesVisited(grid);\n    if (nodesVisited === maxNodes - 2) {\n      return visitedNodesInOrder;\n    }\n    if (nodesVisited > maxNodesVisitedTracker) {\n      maxNodesVisitedTracker = nodesVisited;\n      loopTracker = 0;\n    } else if ((nodesVisited = maxNodesVisitedTracker)) {\n      loopTracker += 1;\n      if (loopTracker > 1000) {\n        return visitedNodesInOrder;\n      }\n    }\n    randomNeighbour.previousNode = closestNode;\n    closestNode = randomNeighbour;\n  }\n}\n\nfunction getRandomNeighbour(node, grid, finishNode) {\n  let neighbours = [];\n  let { row, col } = node;\n  if (row !== 0) neighbours.push(grid[row - 1][col]);\n  if (col !== grid[0].length - 1) neighbours.push(grid[row][col + 1]);\n  if (row !== grid.length - 1) neighbours.push(grid[row + 1][col]);\n  if (col !== 0) neighbours.push(grid[row][col - 1]);\n  let neighboursFilteredStartAndWall = neighbours.filter(\n    (neighbour) => !neighbour.isStart && !neighbour.isWall\n  );\n  let neighboursFilteredVisited = neighboursFilteredStartAndWall.filter(\n    (neighbour) => !neighbour.isVisited\n  );\n  if (neighboursFilteredVisited.length > 0) {\n    return neighboursFilteredVisited[\n      Math.floor(Math.random() * neighboursFilteredVisited.length)\n    ];\n  }\n  return neighboursFilteredStartAndWall[\n    Math.floor(Math.random() * neighboursFilteredStartAndWall.length)\n  ];\n}\n\nfunction numNodesVisited(grid) {\n  let count = 0;\n  for (let row of grid) {\n    for (let node of row) {\n      if (node.isVisited || node.isWall) count += 1;\n    }\n  }\n  return count;\n}\n","export function greedyBFS(grid, startNode, finishNode) {\n  if (!startNode || !finishNode || startNode === finishNode) {\n    return false;\n  }\n  let unvisitedNodes = []; //open list\n  let visitedNodesInOrder = []; //closed list\n  startNode.distance = 0;\n  unvisitedNodes.push(startNode);\n\n  while (unvisitedNodes.length !== 0) {\n    unvisitedNodes.sort((a, b) => a.totalDistance - b.totalDistance);\n    let closestNode = unvisitedNodes.shift();\n    if (closestNode === finishNode) return visitedNodesInOrder;\n\n    closestNode.isVisited = true;\n    visitedNodesInOrder.push(closestNode);\n\n    let neighbours = getNeighbours(closestNode, grid);\n    for (let neighbour of neighbours) {\n      let distance = closestNode.distance + 1;\n      //f(n) = h(n)\n      if (neighbourNotInUnvisitedNodes(neighbour, unvisitedNodes)) {\n        unvisitedNodes.unshift(neighbour);\n        neighbour.distance = distance;\n        neighbour.totalDistance = manhattenDistance(neighbour, finishNode);\n        neighbour.previousNode = closestNode;\n      } else if (distance < neighbour.distance) {\n        neighbour.distance = distance;\n        neighbour.totalDistance = manhattenDistance(neighbour, finishNode);\n        neighbour.previousNode = closestNode;\n      }\n    }\n  }\n  return visitedNodesInOrder;\n}\n\nfunction getNeighbours(node, grid) {\n  let neighbours = [];\n  let { row, col } = node;\n  if (row !== 0) neighbours.push(grid[row - 1][col]);\n  if (col !== grid[0].length - 1) neighbours.push(grid[row][col + 1]);\n  if (row !== grid.length - 1) neighbours.push(grid[row + 1][col]);\n  if (col !== 0) neighbours.push(grid[row][col - 1]);\n  return neighbours.filter(\n    (neighbour) => !neighbour.isWall && !neighbour.isVisited\n  );\n}\n\nfunction manhattenDistance(node, finishNode) {\n  let x = Math.abs(node.row - finishNode.row);\n  let y = Math.abs(node.col - finishNode.col);\n  return x + y;\n}\n\nfunction neighbourNotInUnvisitedNodes(neighbour, unvisitedNodes) {\n  for (let node of unvisitedNodes) {\n    if (node.row === neighbour.row && node.col === neighbour.col) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function getNodesInShortestPathOrderGreedyBFS(finishNode) {\n  let nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n  return nodesInShortestPathOrder;\n}\n","export function bidirectionalGreedySearch(grid, startNode, finishNode) {\n  if (!startNode || !finishNode || startNode === finishNode) {\n    return false;\n  }\n  let unvisitedNodesStart = [];\n  let visitedNodesInOrderStart = [];\n  let unvisitedNodesFinish = [];\n  let visitedNodesInOrderFinish = [];\n  startNode.distance = 0;\n  finishNode.distance = 0;\n  unvisitedNodesStart.push(startNode);\n  unvisitedNodesFinish.push(finishNode);\n\n  while (\n    unvisitedNodesStart.length !== 0 &&\n    unvisitedNodesFinish.length !== 0\n  ) {\n    unvisitedNodesStart.sort((a, b) => a.totalDistance - b.totalDistance);\n    unvisitedNodesFinish.sort((a, b) => a.totalDistance - b.totalDistance);\n    let closestNodeStart = unvisitedNodesStart.shift();\n    let closestNodeFinish = unvisitedNodesFinish.shift();\n\n    closestNodeStart.isVisited = true;\n    closestNodeFinish.isVisited = true;\n    visitedNodesInOrderStart.push(closestNodeStart);\n    visitedNodesInOrderFinish.push(closestNodeFinish);\n    if (isNeighbour(closestNodeStart, closestNodeFinish)) {\n      return [visitedNodesInOrderStart, visitedNodesInOrderFinish, true];\n    }\n\n    //Start side search\n    let neighbours = getNeighbours(closestNodeStart, grid);\n    for (let neighbour of neighbours) {\n      if (!neighbourNotInUnvisitedNodes(neighbour, unvisitedNodesFinish)) {\n        visitedNodesInOrderStart.push(closestNodeStart);\n        visitedNodesInOrderFinish.push(neighbour);\n        return [visitedNodesInOrderStart, visitedNodesInOrderFinish, true];\n      }\n      let distance = closestNodeStart.distance + 1;\n      //f(n) = h(n)\n      if (neighbourNotInUnvisitedNodes(neighbour, unvisitedNodesStart)) {\n        unvisitedNodesStart.unshift(neighbour);\n        neighbour.distance = distance;\n        neighbour.totalDistance = manhattenDistance(neighbour, finishNode);\n        neighbour.previousNode = closestNodeStart;\n      } else if (distance < neighbour.distance) {\n        neighbour.distance = distance;\n        neighbour.totalDistance = manhattenDistance(neighbour, finishNode);\n        neighbour.previousNode = closestNodeStart;\n      }\n    }\n\n    //Finish side search\n    neighbours = getNeighbours(closestNodeFinish, grid);\n    for (let neighbour of neighbours) {\n      if (!neighbourNotInUnvisitedNodes(neighbour, unvisitedNodesStart)) {\n        visitedNodesInOrderStart.push(closestNodeFinish);\n        visitedNodesInOrderStart.push(neighbour);\n        return [visitedNodesInOrderStart, visitedNodesInOrderFinish, true];\n      }\n      let distance = closestNodeFinish.distance + 1;\n      //f(n) = h(n)\n      if (neighbourNotInUnvisitedNodes(neighbour, unvisitedNodesFinish)) {\n        unvisitedNodesFinish.unshift(neighbour);\n        neighbour.distance = distance;\n        neighbour.totalDistance = manhattenDistance(neighbour, startNode);\n        neighbour.previousNode = closestNodeFinish;\n      } else if (distance < neighbour.distance) {\n        neighbour.distance = distance;\n        neighbour.totalDistance = manhattenDistance(neighbour, startNode);\n        neighbour.previousNode = closestNodeFinish;\n      }\n    }\n  }\n  return [visitedNodesInOrderStart, visitedNodesInOrderFinish, false];\n}\n\nfunction isNeighbour(closestNodeStart, closestNodeFinish) {\n  let rowStart = closestNodeStart.row;\n  let colStart = closestNodeStart.col;\n  let rowFinish = closestNodeFinish.row;\n  let colFinish = closestNodeFinish.col;\n  if (rowFinish === rowStart - 1 && colFinish === colStart) return true;\n  if (rowFinish === rowStart && colFinish === colStart + 1) return true;\n  if (rowFinish === rowStart + 1 && colFinish === colStart) return true;\n  if (rowFinish === rowStart && colFinish === colStart - 1) return true;\n  return false;\n}\n\nfunction getNeighbours(node, grid) {\n  let neighbours = [];\n  let { row, col } = node;\n  if (row !== 0) neighbours.push(grid[row - 1][col]);\n  if (col !== grid[0].length - 1) neighbours.push(grid[row][col + 1]);\n  if (row !== grid.length - 1) neighbours.push(grid[row + 1][col]);\n  if (col !== 0) neighbours.push(grid[row][col - 1]);\n  return neighbours.filter(\n    (neighbour) => !neighbour.isWall && !neighbour.isVisited\n  );\n}\n\nfunction manhattenDistance(nodeA, nodeB) {\n  let x = Math.abs(nodeA.row - nodeB.row);\n  let y = Math.abs(nodeA.col - nodeB.col);\n  return x + y;\n}\n\nfunction neighbourNotInUnvisitedNodes(neighbour, unvisitedNodes) {\n  for (let node of unvisitedNodes) {\n    if (node.row === neighbour.row && node.col === neighbour.col) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function getNodesInShortestPathOrderBidirectionalGreedySearch(\n  nodeA,\n  nodeB\n) {\n  let nodesInShortestPathOrder = [];\n  let currentNode = nodeB;\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.push(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n  currentNode = nodeA;\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n  return nodesInShortestPathOrder;\n}\n","import React, { Component } from \"react\";\nimport \"./pathfindingVisualizer.css\";\nimport Node from \"./Node/node\";\nimport NavBar from \"./navbar\";\n\n//Pathfinding Algorithms\nimport {\n  floodFill,\n  getNodesInShortestPathOrderFloodFill,\n} from \"../pathfindingAlgorithms/floodFill\";\n\n\n\nimport {\n  dijkstra,\n  getNodesInShortestPathOrderDijkstra,\n} from \"../pathfindingAlgorithms/dijkstra\";\nimport {\n  astar,\n  getNodesInShortestPathOrderAstar,\n} from \"../pathfindingAlgorithms/astar\";\nimport {\n  breadthFirstSearch,\n  getNodesInShortestPathOrderBFS,\n} from \"../pathfindingAlgorithms/breadthFirstSearch\";\nimport {\n  depthFirstSearch,\n  getNodesInShortestPathOrderDFS,\n} from \"../pathfindingAlgorithms/depthFirstSearch\";\nimport { randomWalk } from \"../pathfindingAlgorithms/randomWalk\";\nimport {\n  greedyBFS,\n  getNodesInShortestPathOrderGreedyBFS,\n} from \"../pathfindingAlgorithms/greedyBestFirstSearch\";\nimport {\n  bidirectionalGreedySearch,\n  getNodesInShortestPathOrderBidirectionalGreedySearch,\n} from \"../pathfindingAlgorithms/bidirectionalGreedySearch\";\n\n//Maze Algorithms\nimport { randomMaze } from \"../mazeAlgorithms/randomMaze\";\nimport { recursiveDivisionMaze } from \"../mazeAlgorithms/recursiveDivision\";\nimport { verticalMaze } from \"../mazeAlgorithms/verticalMaze\";\nimport { horizontalMaze } from \"../mazeAlgorithms/horizontalMaze\";\n\nconst initialNum = getInitialNum(window.innerWidth, window.innerHeight);\nconst initialNumRows = initialNum[0];\nconst initialNumColumns = initialNum[1];\n\nconst startFinishNode = getStartFinishNode(initialNumRows, initialNumColumns);\nconst startNodeRow = startFinishNode[0];\nconst startNodeCol = startFinishNode[1];\nconst finishNodeRow = startFinishNode[2];\nconst finishNodeCol = startFinishNode[3];\n\nclass PathfindingVisualizer extends Component {\n  state = {\n    grid: [],\n    mouseIsPressed: false,\n    visualizingAlgorithm: false,\n    generatingMaze: false,\n    width: window.innerWidth,\n    height: window.innerHeight,\n    numRows: initialNumRows,\n    numColumns: initialNumColumns,\n    speed: 10,\n    mazeSpeed: 10,\n  };\n\n  updateDimensions = () => {\n    this.setState({\n      width: window.innerWidth,\n      height: window.innerHeight,\n    });\n  };\n\n  updateSpeed = (path, maze) => {\n    this.setState({ speed: path, mazeSpeed: maze });\n  };\n\n  componentDidMount() {\n    window.addEventListener(\"resize\", this.updateDimensions);\n    const grid = getInitialGrid(this.state.numRows, this.state.numColumns);\n    this.setState({ grid });\n  }\n\n  handleMouseDown(row, col) {\n    const newGrid = getNewGridWithWalls(this.state.grid, row, col);\n    this.setState({ grid: newGrid, mouseIsPressed: true });\n  }\n\n  handleMouseEnter(row, col) {\n    if (this.state.mouseIsPressed) {\n      const newGrid = getNewGridWithWalls(this.state.grid, row, col);\n      this.setState({ grid: newGrid, mouseIsPressed: true });\n    }\n  }\n\n  handleMouseUp() {\n    this.setState({ mouseIsPressed: false });\n  }\n\n  clearGrid() {\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n      return;\n    }\n    for (let row = 0; row < this.state.grid.length; row++) {\n      for (let col = 0; col < this.state.grid[0].length; col++) {\n        if (\n          !(\n            (row === startNodeRow && col === startNodeCol) ||\n            (row === finishNodeRow && col === finishNodeCol)\n          )\n        ) {\n          document.getElementById(`node-${row}-${col}`).className = \"node\";\n        }\n      }\n    }\n    const newGrid = getInitialGrid(this.state.numRows, this.state.numColumns);\n    this.setState({\n      grid: newGrid,\n      visualizingAlgorithm: false,\n      generatingMaze: false,\n    });\n  }\n\n  clearPath() {\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n      return;\n    }\n    for (let row = 0; row < this.state.grid.length; row++) {\n      for (let col = 0; col < this.state.grid[0].length; col++) {\n        if (\n          document.getElementById(`node-${row}-${col}`).className ===\n          \"node node-shortest-path\"\n        ) {\n          document.getElementById(`node-${row}-${col}`).className = \"node\";\n        }\n      }\n    }\n    const newGrid = getGridWithoutPath(this.state.grid);\n    this.setState({\n      grid: newGrid,\n      visualizingAlgorithm: false,\n      generatingMaze: false,\n    });\n  }\n\n  animateShortestPath = (nodesInShortestPathOrder, visitedNodesInOrder) => {\n    if (nodesInShortestPathOrder.length === 1)\n      this.setState({ visualizingAlgorithm: false });\n    for (let i = 1; i < nodesInShortestPathOrder.length; i++) {\n      if (i === nodesInShortestPathOrder.length - 1) {\n        setTimeout(() => {\n          let newGrid = updateNodesForRender(\n            this.state.grid,\n            nodesInShortestPathOrder,\n            visitedNodesInOrder\n          );\n          this.setState({ grid: newGrid, visualizingAlgorithm: false });\n        }, i * (3 * this.state.speed));\n        return;\n      }\n      let node = nodesInShortestPathOrder[i];\n      setTimeout(() => {\n        //shortest path node\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          \"node node-shortest-path\";\n      }, i * (3 * this.state.speed));\n    }\n  };\n\n  animateAlgorithm = (visitedNodesInOrder, nodesInShortestPathOrder) => {\n    let newGrid = this.state.grid.slice();\n    for (let row of newGrid) {\n      for (let node of row) {\n        let newNode = {\n          ...node,\n          isVisited: false,\n        };\n        newGrid[node.row][node.col] = newNode;\n      }\n    }\n    this.setState({ grid: newGrid });\n    for (let i = 1; i <= visitedNodesInOrder.length; i++) {\n      let node = visitedNodesInOrder[i];\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(\n            nodesInShortestPathOrder,\n            visitedNodesInOrder\n          );\n        }, i * this.state.speed);\n        return;\n      }\n      setTimeout(() => {\n        //visited node\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          \"node node-visited\";\n      }, i * this.state.speed);\n    }\n  };\n\n  animateRandomWalk = (visitedNodesInOrder) => {\n    for (let i = 1; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.setState({ visualizingAlgorithm: false });\n        }, i * this.state.speed);\n        return;\n      }\n      let node = visitedNodesInOrder[i];\n      if (i === visitedNodesInOrder.length - 1) {\n        setTimeout(() => {\n          //finish node\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            \"node node-finish-reached\";\n        }, i * this.state.speed);\n        continue;\n      }\n      setTimeout(() => {\n        //visited node\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          \"node node-visited\";\n      }, i * this.state.speed);\n    }\n  };\n\n  animateBidirectionalAlgorithm(\n    visitedNodesInOrderStart,\n    visitedNodesInOrderFinish,\n    nodesInShortestPathOrder,\n    isShortedPath\n  ) {\n    let len = Math.max(\n      visitedNodesInOrderStart.length,\n      visitedNodesInOrderFinish.length\n    );\n    for (let i = 1; i <= len; i++) {\n      let nodeA = visitedNodesInOrderStart[i];\n      let nodeB = visitedNodesInOrderFinish[i];\n      if (i === visitedNodesInOrderStart.length) {\n        setTimeout(() => {\n          let visitedNodesInOrder = getVisitedNodesInOrder(\n            visitedNodesInOrderStart,\n            visitedNodesInOrderFinish\n          );\n          if (isShortedPath) {\n            this.animateShortestPath(\n              nodesInShortestPathOrder,\n              visitedNodesInOrder\n            );\n          } else {\n            this.setState({ visualizingAlgorithm: false });\n          }\n        }, i * this.state.speed);\n        return;\n      }\n      setTimeout(() => {\n        //visited nodes\n        if (nodeA !== undefined)\n          document.getElementById(`node-${nodeA.row}-${nodeA.col}`).className =\n            \"node node-visited\";\n        if (nodeB !== undefined)\n          document.getElementById(`node-${nodeB.row}-${nodeB.col}`).className =\n            \"node node-visited\";\n      }, i * this.state.speed);\n    }\n  }\n\n  visualizeDijkstra() {\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n      return;\n    }\n    this.setState({ visualizingAlgorithm: true });\n    setTimeout(() => {\n      const { grid } = this.state;\n      const startNode = grid[startNodeRow][startNodeCol];\n      const finishNode = grid[finishNodeRow][finishNodeCol];\n      const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n      const nodesInShortestPathOrder = getNodesInShortestPathOrderDijkstra(\n        finishNode\n      );\n      this.animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder);\n    }, this.state.speed);\n  }\nvisualizeFloodFill() {\n  if (this.state.visualizingAlgorithm || this.state.generatingMaze) return;\n\n  this.setState({ visualizingAlgorithm: true });\n\n  setTimeout(() => {\n    const { grid } = this.state;\n    const startNode = grid[startNodeRow][startNodeCol];\n    const finishNode = grid[finishNodeRow][finishNodeCol];\n\n    const visitedNodesInOrder = floodFill(grid, startNode, finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrderFloodFill(finishNode);\n\n    this.animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder);\n  }, this.state.speed);\n}\n\n\n\n  visualizeAStar() {\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n      return;\n    }\n    this.setState({ visualizingAlgorithm: true });\n    setTimeout(() => {\n      const { grid } = this.state;\n      const startNode = grid[startNodeRow][startNodeCol];\n      const finishNode = grid[finishNodeRow][finishNodeCol];\n      const visitedNodesInOrder = astar(grid, startNode, finishNode);\n      const nodesInShortestPathOrder = getNodesInShortestPathOrderAstar(\n        finishNode\n      );\n      this.animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder);\n    }, this.state.speed);\n  }\n\n  visualizeBFS() {\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n      return;\n    }\n    this.setState({ visualizingAlgorithm: true });\n    setTimeout(() => {\n      const { grid } = this.state;\n      const startNode = grid[startNodeRow][startNodeCol];\n      const finishNode = grid[finishNodeRow][finishNodeCol];\n      const visitedNodesInOrder = breadthFirstSearch(\n        grid,\n        startNode,\n        finishNode\n      );\n      const nodesInShortestPathOrder = getNodesInShortestPathOrderBFS(\n        finishNode\n      );\n      this.animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder);\n    }, this.state.speed);\n  }\n\n  visualizeDFS() {\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n      return;\n    }\n    this.setState({ visualizingAlgorithm: true });\n    setTimeout(() => {\n      const { grid } = this.state;\n      const startNode = grid[startNodeRow][startNodeCol];\n      const finishNode = grid[finishNodeRow][finishNodeCol];\n      const visitedNodesInOrder = depthFirstSearch(grid, startNode, finishNode);\n      const nodesInShortestPathOrder = getNodesInShortestPathOrderDFS(\n        finishNode\n      );\n      this.animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder);\n    }, this.state.speed);\n  }\n\n  visualizeRandomWalk() {\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n      return;\n    }\n    this.setState({ visualizingAlgorithm: true });\n    setTimeout(() => {\n      const { grid } = this.state;\n      const startNode = grid[startNodeRow][startNodeCol];\n      const finishNode = grid[finishNodeRow][finishNodeCol];\n      const visitedNodesInOrder = randomWalk(grid, startNode, finishNode);\n      this.animateRandomWalk(visitedNodesInOrder);\n    }, this.state.speed);\n  }\n\n  visualizeGreedyBFS() {\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n      return;\n    }\n    this.setState({ visualizingAlgorithm: true });\n    setTimeout(() => {\n      const { grid } = this.state;\n      const startNode = grid[startNodeRow][startNodeCol];\n      const finishNode = grid[finishNodeRow][finishNodeCol];\n      const visitedNodesInOrder = greedyBFS(grid, startNode, finishNode);\n      const nodesInShortestPathOrder = getNodesInShortestPathOrderGreedyBFS(\n        finishNode\n      );\n      this.animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder);\n    }, this.state.speed);\n  }\n\n  visualizeBidirectionalGreedySearch() {\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n      return;\n    }\n    this.setState({ visualizingAlgorithm: true });\n    setTimeout(() => {\n      const { grid } = this.state;\n      const startNode = grid[startNodeRow][startNodeCol];\n      const finishNode = grid[finishNodeRow][finishNodeCol];\n      const visitedNodesInOrder = bidirectionalGreedySearch(\n        grid,\n        startNode,\n        finishNode\n      );\n      const visitedNodesInOrderStart = visitedNodesInOrder[0];\n      const visitedNodesInOrderFinish = visitedNodesInOrder[1];\n      const isShortedPath = visitedNodesInOrder[2];\n      const nodesInShortestPathOrder = getNodesInShortestPathOrderBidirectionalGreedySearch(\n        visitedNodesInOrderStart[visitedNodesInOrderStart.length - 1],\n        visitedNodesInOrderFinish[visitedNodesInOrderFinish.length - 1]\n      );\n      this.animateBidirectionalAlgorithm(\n        visitedNodesInOrderStart,\n        visitedNodesInOrderFinish,\n        nodesInShortestPathOrder,\n        isShortedPath\n      );\n    }, this.state.speed);\n  }\n\n  animateMaze = (walls) => {\n    for (let i = 0; i <= walls.length; i++) {\n      if (i === walls.length) {\n        setTimeout(() => {\n          this.clearGrid();\n          let newGrid = getNewGridWithMaze(this.state.grid, walls);\n          this.setState({ grid: newGrid, generatingMaze: false });\n        }, i * this.state.mazeSpeed);\n        return;\n      }\n      let wall = walls[i];\n      let node = this.state.grid[wall[0]][wall[1]];\n      setTimeout(() => {\n        //Walls\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          \"node node-wall-animated\";\n      }, i * this.state.mazeSpeed);\n    }\n  };\n\n  generateRandomMaze() {\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n      return;\n    }\n    this.setState({ generatingMaze: true });\n    setTimeout(() => {\n      const { grid } = this.state;\n      const startNode = grid[startNodeRow][startNodeCol];\n      const finishNode = grid[finishNodeRow][finishNodeCol];\n      const walls = randomMaze(grid, startNode, finishNode);\n      this.animateMaze(walls);\n    }, this.state.mazeSpeed);\n  }\n\n  generateRecursiveDivisionMaze() {\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n      return;\n    }\n    this.setState({ generatingMaze: true });\n    setTimeout(() => {\n      const { grid } = this.state;\n      const startNode = grid[startNodeRow][startNodeCol];\n      const finishNode = grid[finishNodeRow][finishNodeCol];\n      const walls = recursiveDivisionMaze(grid, startNode, finishNode);\n      this.animateMaze(walls);\n    }, this.state.mazeSpeed);\n  }\n\n  generateVerticalMaze() {\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n      return;\n    }\n    this.setState({ generatingMaze: true });\n    setTimeout(() => {\n      const { grid } = this.state;\n      const startNode = grid[startNodeRow][startNodeCol];\n      const finishNode = grid[finishNodeRow][finishNodeCol];\n      const walls = verticalMaze(grid, startNode, finishNode);\n      this.animateMaze(walls);\n    }, this.state.mazeSpeed);\n  }\n\n  generateHorizontalMaze() {\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n      return;\n    }\n    this.setState({ generatingMaze: true });\n    setTimeout(() => {\n      const { grid } = this.state;\n      const startNode = grid[startNodeRow][startNodeCol];\n      const finishNode = grid[finishNodeRow][finishNodeCol];\n      const walls = horizontalMaze(grid, startNode, finishNode);\n      this.animateMaze(walls);\n    }, this.state.mazeSpeed);\n  }\n\n  render() {\n    let { grid } = this.state;\n    return (\n      <React.Fragment>\n       <NavBar\n  visualizingAlgorithm={this.state.visualizingAlgorithm}\n  generatingMaze={this.state.generatingMaze}\n  visualizeDijkstra={this.visualizeDijkstra.bind(this)}\n  visualizeAStar={this.visualizeAStar.bind(this)}\n  visualizeGreedyBFS={this.visualizeGreedyBFS.bind(this)}\n  visualizeBidirectionalGreedySearch={this.visualizeBidirectionalGreedySearch.bind(this)}\n  visualizeBFS={this.visualizeBFS.bind(this)}\n  visualizeDFS={this.visualizeDFS.bind(this)}\n  visualizeRandomWalk={this.visualizeRandomWalk.bind(this)}\n  visualizeFloodFill={this.visualizeFloodFill.bind(this)} \n  generateRandomMaze={this.generateRandomMaze.bind(this)}\n  generateRecursiveDivisionMaze={this.generateRecursiveDivisionMaze.bind(this)}\n  generateVerticalMaze={this.generateVerticalMaze.bind(this)}\n  generateHorizontalMaze={this.generateHorizontalMaze.bind(this)}\n  clearGrid={this.clearGrid.bind(this)}\n  clearPath={this.clearPath.bind(this)}\n  updateSpeed={this.updateSpeed.bind(this)}\n/>\n\n        <div\n          className={\n            this.state.visualizingAlgorithm || this.state.generatingMaze\n              ? \"grid-visualizing\"\n              : \"grid\"\n          }\n        >\n          {grid.map((row, rowId) => {\n            return (\n              <div key={rowId}>\n                {row.map((node, nodeId) => {\n                  const {\n                    row,\n                    col,\n                    isStart,\n                    isFinish,\n                    isVisited,\n                    isShortest,\n                    isWall,\n                  } = node;\n                  return (\n                    <Node\n                      key={nodeId}\n                      row={row}\n                      col={col}\n                      isStart={isStart}\n                      isFinish={isFinish}\n                      isVisited={isVisited}\n                      isShortest={isShortest}\n                      isWall={isWall}\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\n                      onMouseEnter={(row, col) =>\n                        this.handleMouseEnter(row, col)\n                      }\n                      onMouseUp={() => this.handleMouseUp()}\n                      width={this.state.width}\n                      height={this.state.height}\n                      numRows={this.state.numRows}\n                      numColumns={this.state.numColumns}\n                    ></Node>\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nfunction getInitialNum(width, height) {\n  let numColumns;\n  if (width > 1500) {\n    numColumns = Math.floor(width / 25);\n  } else if (width > 1250) {\n    numColumns = Math.floor(width / 22.5);\n  } else if (width > 1000) {\n    numColumns = Math.floor(width / 20);\n  } else if (width > 750) {\n    numColumns = Math.floor(width / 17.5);\n  } else if (width > 500) {\n    numColumns = Math.floor(width / 15);\n  } else if (width > 250) {\n    numColumns = Math.floor(width / 12.5);\n  } else if (width > 0) {\n    numColumns = Math.floor(width / 10);\n  }\n  let cellWidth = Math.floor(width / numColumns);\n  let numRows = Math.floor(height / cellWidth);\n  return [numRows, numColumns];\n}\n\nfunction getRandomNums(num) {\n  let randomNums1 = [];\n  let temp = 2;\n  for (let i = 5; i < num / 2; i += 2) {\n    randomNums1.push(temp);\n    temp += 2;\n  }\n  let randomNums2 = [];\n  temp = -2;\n  for (let i = num / 2; i < num - 5; i += 2) {\n    randomNums2.push(temp);\n    temp -= 2;\n  }\n  return [randomNums1, randomNums2];\n}\n\nfunction getStartFinishNode(numRows, numColumns) {\n  let randomNums;\n  let x;\n  let y;\n  let startNodeRow;\n  let startNodeCol;\n  let finishNodeRow;\n  let finishNodeCol;\n  if (numRows < numColumns) {\n    randomNums = getRandomNums(numRows);\n    x = Math.floor(numRows / 2);\n    y = Math.floor(numColumns / 4);\n    if (x % 2 !== 0) x -= 1;\n    if (y % 2 !== 0) y += 1;\n    startNodeRow =\n      x + randomNums[1][Math.floor(Math.random() * randomNums[1].length)];\n    startNodeCol = y + [-6, -4, -2, 0][Math.floor(Math.random() * 4)];\n    finishNodeRow =\n      x + randomNums[0][Math.floor(Math.random() * randomNums[0].length)];\n    finishNodeCol =\n      numColumns - y + [0, 2, 4, 6][Math.floor(Math.random() * 4)];\n  } else {\n    randomNums = getRandomNums(numColumns);\n    x = Math.floor(numRows / 4);\n    y = Math.floor(numColumns / 2);\n    if (x % 2 !== 0) x -= 1;\n    if (y % 2 !== 0) y += 1;\n    startNodeRow = x + [-6, -4, -2, 0][Math.floor(Math.random() * 4)];\n    startNodeCol =\n      y + randomNums[1][Math.floor(Math.random() * randomNums[1].length)];\n    finishNodeRow = numRows - x + [0, 2, 4, 6][Math.floor(Math.random() * 4)];\n    finishNodeCol =\n      y + randomNums[0][Math.floor(Math.random() * randomNums[0].length)];\n  }\n  return [startNodeRow, startNodeCol, finishNodeRow, finishNodeCol];\n}\n\nconst getInitialGrid = (numRows, numColumns) => {\n  let grid = [];\n  for (let row = 0; row < numRows; row++) {\n    let currentRow = [];\n    for (let col = 0; col < numColumns; col++) {\n      currentRow.push(createNode(row, col));\n    }\n    grid.push(currentRow);\n  }\n  return grid;\n};\n\nconst createNode = (row, col) => {\n  return {\n    row,\n    col,\n    isStart: row === startNodeRow && col === startNodeCol,\n    isFinish: row === finishNodeRow && col === finishNodeCol,\n    distance: Infinity,\n    totalDistance: Infinity,\n    isVisited: false,\n    isShortest: false,\n    isWall: false,\n    previousNode: null,\n  };\n};\n\nconst getNewGridWithWalls = (grid, row, col) => {\n  let newGrid = grid.slice();\n  let node = grid[row][col];\n  let newNode = {\n    ...node,\n    isWall: !node.isWall,\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n\nconst getNewGridWithMaze = (grid, walls) => {\n  let newGrid = grid.slice();\n  for (let wall of walls) {\n    let node = grid[wall[0]][wall[1]];\n    let newNode = {\n      ...node,\n      isWall: true,\n    };\n    newGrid[wall[0]][wall[1]] = newNode;\n  }\n  return newGrid;\n};\n\nconst getGridWithoutPath = (grid) => {\n  let newGrid = grid.slice();\n  for (let row of grid) {\n    for (let node of row) {\n      let newNode = {\n        ...node,\n        distance: Infinity,\n        totalDistance: Infinity,\n        isVisited: false,\n        isShortest: false,\n        previousNode: null,\n      };\n      newGrid[node.row][node.col] = newNode;\n    }\n  }\n  return newGrid;\n};\n\nconst updateNodesForRender = (\n  grid,\n  nodesInShortestPathOrder,\n  visitedNodesInOrder\n) => {\n  let newGrid = grid.slice();\n  for (let node of visitedNodesInOrder) {\n    if (\n      (node.row === startNodeRow && node.col === startNodeCol) ||\n      (node.row === finishNodeRow && node.col === finishNodeCol)\n    )\n      continue;\n    let newNode = {\n      ...node,\n      isVisited: true,\n    };\n    newGrid[node.row][node.col] = newNode;\n  }\n  for (let node of nodesInShortestPathOrder) {\n    if (node.row === finishNodeRow && node.col === finishNodeCol) {\n      return newGrid;\n    }\n    let newNode = {\n      ...node,\n      isVisited: false,\n      isShortest: true,\n    };\n    newGrid[node.row][node.col] = newNode;\n  }\n};\n\nconst getVisitedNodesInOrder = (\n  visitedNodesInOrderStart,\n  visitedNodesInOrderFinish\n) => {\n  let visitedNodesInOrder = [];\n  let n = Math.max(\n    visitedNodesInOrderStart.length,\n    visitedNodesInOrderFinish.length\n  );\n  for (let i = 0; i < n; i++) {\n    if (visitedNodesInOrderStart[i] !== undefined) {\n      visitedNodesInOrder.push(visitedNodesInOrderStart[i]);\n    }\n    if (visitedNodesInOrderFinish[i] !== undefined) {\n      visitedNodesInOrder.push(visitedNodesInOrderFinish[i]);\n    }\n  }\n  return visitedNodesInOrder;\n};\n\nexport default PathfindingVisualizer;\n\n/* <button className=\"button\" onClick={() => this.visualizeDijkstra()}>\nDijkstra's\n</button>\n&nbsp;\n<button className=\"button\" onClick={() => this.visualizeAStar()}>\nA Star\n</button>\n&nbsp;\n<button className=\"button\" onClick={() => this.visualizeBFS()}>\nBreadth First Search\n</button>\n&nbsp;\n<button className=\"button\" onClick={() => this.visualizeDFS()}>\nDepth First Search\n</button>\n&nbsp;\n<button className=\"button\" onClick={() => this.visualizeRandomWalk()}>\nRandom Walk\n</button>\n&nbsp;\n<button className=\"button\" onClick={() => this.clearGrid()}>\nClear Grid\n</button>\n<br />\n<button className=\"button\" onClick={() => this.visualizeGreedyBFS()}>\nGreedy Best First Search\n</button>\n&nbsp;\n<button\nclassName=\"button\"\nonClick={() => this.visualizeBidirectionalGreedySearch()}\n>\nBidirectional Best First Search\n</button>\n&nbsp;\n<button className=\"button\" onClick={() => this.generateRandomMaze()}>\nRandom Maze\n</button>\n&nbsp;\n<button\nclassName=\"button\"\nonClick={() => this.generateRecursiveDivisionMaze()}\n>\nRecursive Division\n</button>\n&nbsp;\n<button\nclassName=\"button\"\nonClick={() => this.generateVerticalMaze()}\n>\nVertical Maze\n</button>\n&nbsp;\n<button\nclassName=\"button\"\nonClick={() => this.generateHorizontalMaze()}\n>\nHorizontal Maze\n</button>\n */\n","export function floodFill(grid, startNode, finishNode) {\r\n  if (!startNode || startNode.row == null || startNode.col == null) {\r\n    throw new Error(\"Invalid start node passed to floodFill\");\r\n  }\r\n\r\n  const visitedNodesInOrder = [];\r\n  const numRows = grid.length;\r\n  const numCols = grid[0].length;\r\n  let foundTarget = false;\r\n\r\n  const dfs = (row, col, parent = null) => {\r\n    if (\r\n      foundTarget ||\r\n      row < 0 || col < 0 ||\r\n      row >= numRows || col >= numCols ||\r\n      grid[row][col].isWall ||\r\n      grid[row][col].isVisited\r\n    ) return;\r\n\r\n    const node = grid[row][col];\r\n    node.isVisited = true;\r\n    node.previousNode = parent; // Track the parent\r\n    visitedNodesInOrder.push(node);\r\n\r\n    if (node === finishNode) {\r\n      foundTarget = true;\r\n      return;\r\n    }\r\n\r\n    dfs(row + 1, col, node);\r\n    dfs(row - 1, col, node);\r\n    dfs(row, col + 1, node);\r\n    dfs(row, col - 1, node);\r\n  };\r\n\r\n  dfs(startNode.row, startNode.col);\r\n  return visitedNodesInOrder;\r\n}\r\nexport function getNodesInShortestPathOrderFloodFill(finishNode) {\r\n  const nodesInShortestPathOrder = [];\r\n  let current = finishNode;\r\n\r\n  while (current !== null) {\r\n    nodesInShortestPathOrder.unshift(current);\r\n    current = current.previousNode || null;\r\n  }\r\n\r\n  return nodesInShortestPathOrder;\r\n}\r\n","export function randomMaze(grid, startNode, finishNode) {\n  if (!startNode || !finishNode || startNode === finishNode) {\n    return false;\n  }\n  let walls = [];\n  for (let row = 0; row < grid.length; row++) {\n    for (let col = 0; col < grid[0].length; col++) {\n      if (\n        (row === startNode.row && col === startNode.col) ||\n        (row === finishNode.row && col === finishNode.col)\n      )\n        continue;\n      if (Math.random() < 0.33) {\n        walls.push([row, col]);\n      }\n    }\n  }\n  walls.sort(() => Math.random() - 0.5);\n  return walls;\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"bootstrap/js/dist/dropdown\";\nimport PathfindingVisualizer from \"./pathfindingVisualizer/pathfindingVisualizer\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <PathfindingVisualizer />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}